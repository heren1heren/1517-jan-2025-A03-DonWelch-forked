@page "/dataentry"
<PageTitle>Data Entry</PageTitle>
@rendermode InteractiveServer

<!-- this namespace is needed because we are using classes from the OOPsReview namespace-->
@using OOPsReview;
<!-- this using namespace is needed for JSRunTime-->
@using Microsoft.JSInterop;


<h1>Data Entry</h1>
<h4>Employment Data Collection</h4>

@*
    we wish to add a blockquote but center the control on the page
    to do so, we will use bootstrap formating with rows/columns
*@
<div class="row">
    <div class="offset-1 col-md-10">
        <blockquote style="background-color:gainsboro;">
            <p>
                This component will demonstrate how your page can handle validation of data input,
                showing validation messages when you have a number of controls for data entry. This
                component will validate the local controls and create any validation messages for
                invalid data. The messages can be collected using various techniques such as: List or
                Dictionary.
            </p>
            <p>
                This page will input data for an instance of the Employment class. This demo will
                use the Employment class from the OOPs review. The SupervisoryLevel enum
                class will also be brought into this project. One could have included the entire
                class library as part of this solution instead of bringing in individual classes.
            </p>
        </blockquote>
    </div>
</div>

@*
    feedback area
        success message
        error messages
*@

<!--
Success area
check if there is a feedback message, if so display it

also could use: if(feedBackMsg.Length > 0)
-->

@if(!string.IsNullOrWhiteSpace(feedBackMsg))
{
    <div class="alert alert-success">
        <p>@feedBackMsg</p>
    </div>
}

<!--
Error Message area
check if there are any error messages, if so display them
-->

@if(errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues</p>
        <ul>
            @foreach (var error in errorMsgs)
            {
                <!--
                due to the structure of a Dictionary entry
                there are two components: key and value  (often called key/value pair)
                Here we wish to just use the value

                If this was a List collection there is only
                one component, the string
                therefore you would NOT need the .Value
                -->
                <li>@error.Value</li>
            }
        </ul>
    </div>
}

<!--
form area
standard html controls
use bootstrap for formating
each control will be on a separate row
each row is stack top to bottom
-->
<fieldset>
    <legend>Employment Data</legend>
    <!--
    the structure of a row will contain 2 columns
    1) will contain the label for the data entry
    2) will contain the input control for the data entry

    offset is to skip over n columns in the row
    col-ss-nn is to merge n columns into a single column
    -->
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="title">Position Title</label>
        </div>
        <div class="col-md-2">
            <input type="text" id="title" placeholder="enter position" @bind="empTitle" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="years">Years in Position</label>
        </div>
        <div class="col-md-2">
            <!-- 
            restrict the data type for this control to allow ONLY numbers
            the step attribute allows the control's spinner to increment by
            a selected interval, default is 1
            -->
            <input type="number" id="years" placeholder="eg: 3.4"
            style="width:75px;" @bind="empYears"
            step="0.1"/>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="startdate">Start Date</label>
        </div>
        <div class="col-md-2">
            <!-- restrict the data type for this control to allow ONLY dates-->
            <input type="date" id="startdate" @bind="empStartDate" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="levelS">SuperVisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
            this will limit the user to ONLY acceptable values
            -->
            <select id="levelS" @bind=empLevelS>
                <!-- the user must choice a supervisory level, therefore
                there is no need for a prompt line on this select
                -->
                <!--
                there is a line for each item in the Enum
                you could hard-code each option tag

                <option value="Entry">Entry</option>
                <option value="TeamMember">TeamMember</option>
                <option value="TeamLeader">TeamLeader</option>
                <option value="Supervisory">Supervisory</option>
                <option value="DepartmentHead">DepartmentHead</option>
                <option value="Owner">Owner</option>
                -->
                <!--
                you can also access the Enum definition and
                extract each enum value (treating the Enum as a collection)
                the Enum.GetValues(typeof(SupervisoryLevel)) returns an array collection
                -->
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)))
                {
                    //each Enum will consider the value as a string
                    //the value attribute is the value returned when a choice has been made
                    //the string between the opening and closing tag will be displayed to the user
                    <option value="@item">@item</option>
                }
            </select>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="offset-4 col-md-2">
            <label for="levelR">SuperVisory Level</label>
        </div>
        <div class="col-md-2">
            <!-- we wish to select from a set of defined choices
            this will limit the user to ONLY acceptable values

            this control is not a standard html input control
            this control is a Blazor control
            this control needs to use bind-value instead of just bind
            -->
            <InputRadioGroup Name="supervisoryradio" id="levelR" @bind-Value="empLevelR">
                @foreach(var item in Enum.GetValues(typeof(SupervisoryLevel)).Cast<SupervisoryLevel>())
                {
                    <InputRadio Name="supervisoryradio" Value="@item" /> @item.ToString() <br/>
                }

            </InputRadioGroup>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
                    @onclick="OnCollect" style="width:155px;">
                Submit
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
                    @onclick="OnClear" style="width:155px;">
                Clear
            </button>
            &nbsp;&nbsp;
            <button type="submit" class="btn btn-outline-secondary rounded-pill"
            @onclick="OnGoToReport" style="width:155px;">
                Go To Report
            </button>
        </div>
    </div>
</fieldset>


@code {
    private string feedBackMsg = "";

    //could be using a List<string> as well as this Dictionary
    //private List<string> errormsgs = new ();

    //the Dictionary has a structure of 2 values: TKey (acts like a primary key)
    //                                            TValue which is the string associated with the key
    //one could search the dictionary on the TKey value and retreive the TValue string
    //NOTE: the TKey value MUST be unique within the entries of the Dictionary
    Dictionary<string, string> errorMsgs = new();

    //Employment input variable declarations
    //EACH @bind needs a associated variable declaration
    private string empTitle;
    private double empYears = 0.0;
    private DateTime empStartDate;
    private SupervisoryLevel empLevelS;
    private SupervisoryLevel empLevelR;

    //Employment class variable that can hold an instance of the class
    Employment employment = null;

    //injected services into your application
    //the declaration needs to be coded as a property, typically an auto-implemented property
    //WARNING: you may get a exception on the declaration (red line), if so place a using
    //  clause at the top of this file (using Microsoft.JSInterop;)
    [Inject]
    private IJSRuntime jsRuntime { get; set; }

    //this variable is required if you are using property injection
    //  for services available from the system which are not normally included
    //  for use to your application
    [Inject]
    public IWebHostEnvironment webHostEnvironment { get; set; }

    //this inject is for the navigating from Page A to Page B
    [Inject]
    public NavigationManager navigationManager { get; set; }

    protected override void OnInitialized()
    {
        // feedBackMsg = "demo of success message";
        // errorMsgs.Add("1", "first error message");
        // errorMsgs.Add("2", "second error message");
        // errorMsgs.Add("3", "third error message");

        empStartDate = DateTime.Today; //initialize the date to today when the page 1st appears
        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        //handle any type of exception: therefore use most generic datatype: Exception

        //loop through the layers of errors within the InnerException of the exception class
        while (ex.InnerException !=null)
            ex = ex.InnerException;

        return ex;
    }


    private void OnCollect()
    {
        //clear all old messages
        feedBackMsg = "";
        errorMsgs.Clear();

        //primitive validation
        //  presence
        //  datatype/pattern
        //  range of values

        //Business Rules (aka your validation requirements)
        //title must be presence, must have at least one character
        //start date cannot be in the future
        //years cannot be less than zero

        if(string.IsNullOrWhiteSpace(empTitle))
        {
            errorMsgs.Add("Title", "Title is required");
        }

        if (empStartDate >= DateTime.Today.AddDays(1))
        {
            errorMsgs.Add("Date", "Start Date cannot be in the future");
        }

        if(empYears < 0)
        {
            errorMsgs.Add("Years", "Years cannot be a negative value.");
        }

        if(errorMsgs.Count == 0)
        {
            // feedBackMsg = $"{empTitle} {empYears} {empStartDate} {empLevelS} {empLevelR}";

            //if you are using a class to collect and hold your data
            //      you need to be concerned with how the class coding handles
            //      any errors in creating or processing code within the class
            //this normally means some type of try/catch processing
            try
            {

                //create an instance of Employment to use to write to the data file
                //the data file record will use the ToString() of Employment
                //(Note: you could manually in this method create the concatenated string for
                //      writing)
                //Remember if an error occurs while creating your instance, the instance will
                //  throw an exception; which should be caught by the catches below.

                employment = new Employment(empTitle, empLevelS, empStartDate, empYears);

                //write the class data as a string to a csv text file
                // required:
                // a) know the location of the file (name)
                // b) the technique to use in writing to the file
                //    there are several ways to write to the file
                //      a) StreamWriter/StreamReader
                //      b) using the System.IO.File methods
                //           (handles the streaming of the data)

                //there are a couple of ways to refer to your file and its path
                //  i) obtain the root path of your application using an injection
                //      service called IWebHostEnvironment via property injection (see variables)
                //  ii) use relative addressing starting a the top of your application

                //in this example we will demonstrate property injection
                //the method that will be use will return the path from the
                //  top of your drive to the top of your application
                //append the remainder part of the file path to this result (via concentation)

                string appPathName = webHostEnvironment.ContentRootPath; //to the top of the application

                //WARNING: the folder slash for your path can be both a forward or back slash
                //              on a PC BUT for an Apple machine, you must use the forward slash (/)
                string csvFilePathName = $@"{appPathName}/Data/Employment.csv"; //this is a text file

                //write the data from the employment instance (ToString) as a line to the csv file
                //since the string does not contain a line feed character, we will need to concatenate
                //  the character (\n)
                //the System.IO.File method will be AppendAllText(filepathname,string)
                // AppendAllText will
                //   a) create the file if it does not exist
                //   b) opens
                //   c) writes the text
                //   d) closes

                //WARNING: when you use the System.IO.File you MUST use the
                //          fully qualified naming to the class method you wish
                //          to use.
                //         you can not get by just using a reference to the
                //           namespace at the top of your code (using System.IO;)

                //create my output line
                string line = $"{employment.ToString()}\n";

                //write to the file in append mode (add to the existing data)
                System.IO.File.AppendAllText(csvFilePathName, line);

                //give the user a feedback message that indicates the success 
                //  of the operation: writing to the file.
                feedBackMsg ="Your data has been saved to file.";
            }
            catch(ArgumentNullException ex)
            {
                errorMsgs.Add("Missing Data", $"Missing Data: {GetInnerException(ex).Message}");
            }
            catch (ArgumentException ex)
            {
                errorMsgs.Add("Bad value", $"Bad value: {GetInnerException(ex).Message}");
            }
            catch(Exception ex)
            {
                errorMsgs.Add("System Error", $"System Error: {GetInnerException(ex).Message}");
            }

        }

    }

    //this method is being done as an async task as it has to wait for the user
    //  to respond
    //this async task will need a service called JSRunTime
    //you will need to inject a service into my code

    private async Task OnClear()
    {
        //clear all old messages
        feedBackMsg = "";

        //issue a prompt dialogue to the user to obtain confirmation of the action
        //create your message for the dialogue box into a generic object[]
        object[] messageline = new object[]
        {"Clearing will lose all unsaved data. Are you sure you wish to continue?"};
        if (await jsRuntime.InvokeAsync<bool>("confirm",messageline))
        {
            //clear only if the user has clicked 'OK' on the dialogue
            errorMsgs.Clear();

            //clear all input control variables
            empTitle = "";
            empYears = 0.0;
            empStartDate = DateTime.Today;
            empLevelS = SupervisoryLevel.Entry;
            empLevelR = SupervisoryLevel.Entry;
        }
    }

    private async Task OnGoToReport()
    {
        //clear all old messages
        feedBackMsg = "";

        //issue a prompt dialogue to the user to obtain confirmation of the action
        //create your message for the dialogue box into a generic object[]
        object[] messageline = new object[]
        {"Leaving the page will lose all unsaved data. Are you sure you wish to continue?"};
        if (await jsRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            //use the appropriate navigation service to go to another page
            //use the routing page name to go to the desired page
            navigationManager.NavigateTo("report");
        }
    }
}
