@page "/categoryproducts"
<PageTitle>Category Products</PageTitle>
@rendermode InteractiveServer
@using WestWindSystem.Entities;
@using WestWindSystem.BLL;

<h1>Category Products</h1>
<h4>... select category to view products</h4>

<!-- area to feedback messages-->
@if (feedBackMessage.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedBackMessage</p>
    </div>
}
<!-- area to error messages-->
@if (errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errorMsgs)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-12">
        <label for="catlist">Select Product Category:</label>
        &nbsp;&nbsp;
        <select id="catlist" @bind="CategoryId">
            <option value="0">select category ...</option>
            @foreach(var cat in categoryList)
            {
                <option value="@cat.CategoryID">@cat.CategoryName</option>
            }
        </select>
        &nbsp;&nbsp;
        <button type="submit" class="btn btn-outline-primary rounded-pill"
                    @onclick="FetchProducts">Fetch Products</button>
        <!--
            these two button will demonstrate ways that you can call
            another page from an existing page
            one button will have a NavLink to the new page
            one button will call an event method on this page which
                will navigate to the new page
        -->
        &nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill">
            <NavLink href="productcrud">CRUD via Navlink</NavLink>
        </button>
        &nbsp;
        <button type="submit" class="btn btn-outline-secondary rounded-pill"
                @onclick="GoToCRUD">
            CRUD via Event
        </button> 
       
    </div>
</div>
<br/><br/>
<div class="row">
    @if (productList.Count > 0)
    {
        <div class="offset-2 col-md-8 overflow-scroll" style="height:450px;">
            <table class="table table-striped">
                <thead style="position:sticky; top:0; background-color:white;">
                    <tr>
                        <th>&nbsp;</th>
                        <th>Product</th>
                        <th>Unit Size</th>
                        <th>Company Name</th>
                        <th>Disc.</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(Product item in productList)
                    {
                        // the link on the display line will send the display to the crud page
                        // HOWEVER, an important piece of data also needs to be send to the crud page
                        //          that piece of data is the pkey of the product to display on
                        //                  the crud
                        // Solution: The "View" needs to be an anchor tag to be able to transfer
                        //              the user to the CRUD page
                        //           we can add that information to the href as a routing parameter
                        //           the crud page will need to alter its @page directive to capture
                        //                the routing parameter
                        //           on this page add the parameter value to send to the href
                        <tr>
                           <td><a href="/productCRUD/@item.ProductID">View</a></td>
                            <td>@item.ProductName</td>
                            <td>@item.QuantityPerUnit</td>
                            <td> @item.Supplier.CompanyName</td>
                            <td>@(item.Discontinued ? "Yes" : " ")</td>
                        </tr>
                    }
                </tbody>
            
            </table>
        </div>
    }
    else
    {
        if (CategoryId > 0)
        {
            <div class="offset-3 col-md-6 text-center" style="font-size:48px">
                <p>No products for the selected category</p>
            </div>
        }
    } 

</div>

<!-- create a filter input area
     drop down list of category names to select from

-->
@code {
    // since we are coding with c# class, let's use properties for our variables
    private string feedBackMessage = "";
    private List<string> errorMsgs { get; set; } = new List<string>();

    //inject the CategoryService into the page
    //this will allow access to the methods in the CategoryService BLL class
    [Inject]
    private CategoryServices _categoryServices { get; set; }
    private List<Category> categoryList { get; set; }
    private int CategoryId { get; set; }

    //inject the ProductService into the page
    [Inject]
    private ProductServices _productServices { get; set; }
    private List<Product> productList { get; set; } = new List<Product>();


    //inject the SupplyService into the page
    [Inject]
    private SupplierServices _supplierServices { get; set; }
    //private List<Supplier> supplierList { get; set; }

    [Inject]
    private NavigationManager _navManager { get; set; }

    protected override void OnInitialized()
    {
        //retrieve the list of category via the CategoryServices in your BLL
        categoryList = _categoryServices.Categories_Get();
        //retrieve the list of supplier via the SupplierServices in your BLL
        //this data collect is use to map the Company Name to the product in the
        //  table display. You could instead use the .Include on the product query
        //  instead of using this collection
        //supplierList = _supplierServices.Supplier_GetList();

        base.OnInitialized();
    }


    private void FetchProducts()
    {
        //fetch the list of products depending of the category selection
        //if no category was selected display a message and clear old product display

        //clear old messages
        feedBackMessage = "";
        errorMsgs.Clear();
        productList.Clear();

        //validation
        if (CategoryId == 0)
        {
            feedBackMessage = "Select a category to view the products.";
        }
        else
        {
            //get the category products
            productList = _productServices.Product_GetByCategoryID(CategoryId);
        }

    }

    private void GoToCRUD()
    {
        //this event will use the Navigate services of the web software
        //the Navigate services must be injected into the page
        //the location your are going to is referenced by the page's routing parameter
        _navManager.NavigateTo("productcrud");
    }
}
