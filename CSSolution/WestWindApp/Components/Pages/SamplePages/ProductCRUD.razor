@page "/productcrud/{productid:int?}"
<!--
on the page directive above, a routing parameter has been add syntax: /routingname/{parametername:datatype}
this will allow an integer value to be passed to this page
the routing parameter (productid) needs to be declare in your code area below

if you have the situation where your receive page may or maynot receive a parameter
value THEN make the datatype nullable (?)

if your parameter is a string, you do not need to specify the routing parameter datatype HOWEVER you
will still want to place a ? (nullable) character at the end of the rouitng parameter name (eg stringpkey?)
-->
@using WestWindSystem.Entities
@using WestWindSystem.BLL


<PageTitle>Product CRUD</PageTitle>

<!-- remember: if you have buttons to click, you need to add the rendermode directive
IF you forget this directive when using EditForm you will receive the following error message:

The POST request does not specify which form is being submitted. To fix this, ensure <form> elements have
a @formname attribute with any unique value, or pass a FormName parameter if using <EditForm>.
-->
@rendermode InteractiveServer

<h1>Product CRUD</h1>

@if (!string.IsNullOrWhiteSpace(feedBackMessage))
{
    <div class="alert alert-info">
        @feedBackMessage
    </div>
}


<div>
    <!-- EditForm this groups a bunch of controls as a single form
    allows for adding additonal option to integrate with your form controls
    contains a set of enhanced input controls

    register an EditContext instance for this form

    DataAnnotationsValidator   the DataAnnotationsValidator component is used within an
    EditForm to enable validation based on data annotations
    applied to model properties.

    ValidationSummary displays a list of all validation errors
    show a summary of errors at the top of the form
    errors can be from model properties or custom messages
    this is optional

    ValidationMessage displays the message associated with the indicated entity field
    this is optional

    one
    -->
    <EditForm EditContext="@editContext">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        <!--
        the form controls will appear between the start and end EditForm tags

        what about format layout
        you can use your normal formatting (eg bootstrap) in laying out your form
        -->
        <div class="row">
            <div class="offset-1 col-md-4">
                <label for="productid" class="form-label">Product ID</label>
                <!--
                We can use enhanced input type controls with EditForm
                No type is need for the EditForm control
                Binding parameter: bind-Value is required when using EditForm controls
                -->
                <InputNumber id="productid" class="form-control"
                @bind-Value="CurrentProduct.ProductID"
                style="width:75px;" readonly/>
                <br/>
                <label for="productname" class="form-label">Name</label>
                <InputText id="productname" class="form-control"
                @bind-Value="CurrentProduct.ProductName"
                placeholder="product name" />
                <!--
                immediately after your input control you can add the validation 
                message tag IF you want your messages immediately after the control

                you can omit this control and still display and error message associated
                with this control with the ValidationSummary
                -->
                <ValidationMessage For="@(() => CurrentProduct.ProductName)"/>
                <br />
                <label for="supplierid" class="form-label">Supplier</label>
                <InputSelect id="supplierid" class="form-control"
                @bind-Value="CurrentProduct.SupplierID">
                    <option value="0">... select</option>
                    @foreach(Supplier item in suppliers)
                    {
                        @*
                        on this option the selected parameter is testing
                        the current supplier id of the supplier list against
                        the current supplier id of the current produce record

                        if there is a match, the select line item will be the
                        line item shown on the page
                        *@
                        <option value="@item.SupplierID"
                        selected="@(item.SupplierID == CurrentProduct.SupplierID)">
                            @item.CompanyName
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
                <br />
                <label for="categoryid" class="form-label">Category</label>
                <InputSelect id="categoryid" class="form-control"
                @bind-Value="CurrentProduct.CategoryID">
                    <option value="0">... select</option>
                    @foreach (Category item in categories)
                    {
                        <option value="@item.CategoryID"
                        selected="@(item.CategoryID == CurrentProduct.CategoryID)">
                            @item.CategoryName
                        </option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
            </div>
            <div class="offset-1 col-md-4">
                <label for="quantityperunit" class="form-label">Qty / Unit</label>
                <InputText id="quantityperunit" class="form-control"
                @bind-Value="CurrentProduct.QuantityPerUnit"
                placeholder="quantity per unit" />
                <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
                <br/>
                <label for="unitprice" class="form-label">Unit Price</label>
                <InputNumber id="unitprice" class="form-control"
                @bind-Value="CurrentProduct.UnitPrice"/>
                <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
                <br />
                <label for="minimumorderqty" class="form-label">Min Order Qty</label>
                <InputNumber id="minimumorderqty" class="form-control"
                @bind-Value="CurrentProduct.MinimumOrderQuantity" />
                <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
                <br />
                <label for="unitsonorder" class="form-label">Units on Order</label>
                <InputNumber id="unitsonorder" class="form-control"
                @bind-Value="CurrentProduct.UnitsOnOrder" />
                <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
            </div>
        </div>
        <br/><br/>
        <div class="row">
            <div class="col-md-12 text-center">
                <button type="submit" class="btn btn-outline-primary rounded-pill"
                @onclick="OnCreate" style="width:160px;">
                    Create
                </button>
                &nbsp;&nbsp;
                <button type="submit" class="btn btn-outline-primary rounded-pill"
                @onclick="OnUpdate" style="width:160px;">
                    Update
                </button>
                &nbsp;&nbsp;

                <!-- determine which of the twice following buttons to display-->
                @if(CurrentProduct.Discontinued)
                {
                    <button type="submit" class="btn btn-outline-primary rounded-pill"
                            @onclick="OnActivate" style="width:160px;">
                        Activate
                    </button>
                }
                else
                {
                    <button type="submit" class="btn btn-outline-primary rounded-pill"
                            @onclick="OnDiscontinue" style="width:160px;">
                        Discontinue
                    </button>
                }

                &nbsp;&nbsp
                <button type="submit" class="btn btn-outline-primary rounded-pill"
                @onclick="OnClear" style="width:160px;">
                    Clear
                </button>
                &nbsp;&nbsp;
                <button type="submit" class="btn btn-outline-primary rounded-pill"
                @onclick="GoToSearch" style="width:160px;">
                    Search
                </button>
                &nbsp;&nbsp;
            </div>
        </div>
    </EditForm>
</div>

@code {

    private string feedBackMessage = "";

    [Inject]
    private ProductServices _productServices { get; set; }
    private Product CurrentProduct = new();

    //declare the routing parameter
    //this property needs a special annotation to indicate it is a parameter
    //parameter properties need to be accessable by other pages (aka classes)
    //  therefore they need to be public
    [Parameter]
    public int? productid { get; set; }

    [Inject]
    private CategoryServices _categoryServices { get; set; }
    private List<Category> categories = new();

    // private int selectedCategoryId;
    [Inject]
    private SupplierServices _supplierServices { get; set; }
    private List<Supplier> suppliers = new();

    [Inject]
    protected NavigationManager CurrentNavigationManager { get; set; }

    [Inject]
    protected IJSRuntime jsRuntime { get; set; }

    //EditForm variables
    //declare the instance for your EditContext
    private EditContext editContext;
    //declare the ValidationMessageStore
    private ValidationMessageStore validationMessageStore;


    protected override void OnInitialized()
    {
        //when the page is first render, we need to determind if the page was called with
        //   a pkey parameter value
        // No value: assumption is a NEW (create) product will be done, nothing to lookup
        // Yes value: assumption an existing product record will be altered or deleted
        //            the current record on the database should be displayed to the user
        //            within this method, lookup the record to display
        //since the productid is a nullable variable, add the .Value to obtain the value,
        //  and use .HasValue to test for the value

        //NOTE: the retrieval of the product instance is REQUIRED BEFORE assigning the instance
        //          to EditContext
        if (productid.HasValue)
            CurrentProduct = _productServices.Product_GetByID(productid.Value);

        //create the EditContext instance AND tie to the instance of the entity of the form
        editContext = new EditContext(CurrentProduct);

        //create vaidation MessageStore instance and indicate which EditContext it is 
        //      associated with
        //needed for custom validation within the event code and
        //   allows the user to use the ValidationMesssage controls of the form
        validationMessageStore = new ValidationMessageStore(editContext);



        categories = _categoryServices.Categories_Get();
        suppliers = _supplierServices.Supplier_GetList();
        base.OnInitialized();

    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnCreate()
    {
        //clear old messages
        feedBackMessage = "";
        validationMessageStore.Clear(); //this replaces the old List<string> errorMsgs

        try
        {
            //the first test is to check to see if there are ANY errors already caught
            //  by the form using the DataAnnotationsValidator?
            if(editContext.Validate())
            {
                //entering this code means that the DataAnnotation of your entity is satisfied

                //if there are additional custom validation of your data
                //  you can still do that within the event coding

                //custom validation for this form will check to see if a category
                //  and supplier have been select (why: the list have a prompt that
                //  has a non valid sql foreign key value)

                //Problem:
                // CategoryID is an integer
                // the default of an integer is 0 ( a value)
                // NO foreign key/primary key on the database is 0
                //      if a proper selection is not done, then when the
                //      record is attempted to be added to the the database
                //      the database will thrown an exception

                //Solution: custom validation
                if (CurrentProduct.CategoryID == 0)
                {
                    //construction of the validation message store command
                    // .Add to your instance of the form for the indicated field
                    // parameter 1: the associated field to display the message
                    //              looking for the "field identifier"
                    //              use nameof(xxx) to supplier of the "field identifier"
                    //      example: editContext.Field(nameof(CurrentProduct.CategoryID))
                    // parameter 2: the message to display
                    //      example: "You must select a category"
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                                               "You must select a category");
                }
                if (CurrentProduct.SupplierID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                                               "You must select a supplier");
                }

                //once your custom validation is done, if there was any new errors, you can check to see
                //  what your validationMessageStore contains

                //if there are any new messages , indicate to the form that the store has been altered
                //to do this, we will use the Linq method .Any()  to determine if something exists
                //NOTE: the .Any() returns only a true or false; it does NOT return an actual records
                //      the .Where() returns actual record
                if(editContext.GetValidationMessages().Any())
                {
                    //notify  the editcontext that there has been a change to the message store
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //the program assumes that the data is clean and can be further processed

                    //call the product services to receive the "good" data and add it to the database (CREATE!!!)
                    //call the appropriate service method and pass the current product instance
                    //the service method will return the new (identity) primary key value.
                    int newproductid = _productServices.Product_Add(CurrentProduct);

                    //if an error was thrown by the ProductServices or by the database
                    //  control will be passed to the catch
                    //if no error was thrown by the ProductServices or by the database
                    //  one assumes the data is on the database: success
                    //you need to communicate with the user this success
                    feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {newproductid}) has been saved";
                }
            }
        }
        catch(ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //  that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            feedBackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch(ArgumentException ex)
        {
            feedBackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch(Exception ex)
        {
            feedBackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnUpdate()
    {
        //clear old messages
        feedBackMessage = "";
        validationMessageStore.Clear(); //this replaces the old List<string> errorMsgs

        try
        {
            //the first test is to check to see if there are ANY errors already caught
            //  by the form using the DataAnnotationsValidator?
            if (editContext.Validate())
            {

                if (CurrentProduct.CategoryID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                                               "You must select a category");
                }
                if (CurrentProduct.SupplierID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                                               "You must select a supplier");
                }

                if (editContext.GetValidationMessages().Any())
                {
                    //notify  the editcontext that there has been a change to the message store
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //the program assumes that the data is clean and can be further processed

                    int rowsaffected = _productServices.Product_Update(CurrentProduct);

                    //Question: DID you ACTUALLY change any records?
                    //situation: an update was attempted but no records on the database were
                    //              actually change AND the action did NOT abort 
                    //in this case rowsafftected = 0
                    if(rowsaffected == 0)
                    {
                        feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {CurrentProduct.ProductID}) has not been updated";

                    }
                    else
                    {
                        feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {CurrentProduct.ProductID}) has been updated";

                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //  that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            feedBackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            feedBackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            feedBackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnDiscontinue()
    {
        //clear old messages
        feedBackMessage = "";
        validationMessageStore.Clear(); //this replaces the old List<string> errorMsgs

        try
        {
            //the first test is to check to see if there are ANY errors already caught
            //  by the form using the DataAnnotationsValidator?
            if (editContext.Validate())
            {

                if (CurrentProduct.CategoryID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                                               "You must select a category");
                }
                if (CurrentProduct.SupplierID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                                               "You must select a supplier");
                }

                if (editContext.GetValidationMessages().Any())
                {
                    //notify  the editcontext that there has been a change to the message store
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //the program assumes that the data is clean and can be further processed

                    int rowsaffected = _productServices.Product_LogicalDelete(CurrentProduct);

                    //Question: DID you ACTUALLY change any records?
                    //situation: an update was attempted but no records on the database were
                    //              actually change AND the action did NOT abort
                    //in this case rowsafftected = 0
                    if (rowsaffected == 0)
                    {
                        feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {CurrentProduct.ProductID}) has not been discontinued";

                    }
                    else
                    {
                        feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {CurrentProduct.ProductID}) has been discontinued";

                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //  that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            feedBackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            feedBackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            feedBackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnActivate()
    {
        //clear old messages
        feedBackMessage = "";
        validationMessageStore.Clear(); //this replaces the old List<string> errorMsgs

        try
        {
            //the first test is to check to see if there are ANY errors already caught
            //  by the form using the DataAnnotationsValidator?
            if (editContext.Validate())
            {

                if (CurrentProduct.CategoryID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                                               "You must select a category");
                }
                if (CurrentProduct.SupplierID == 0)
                {
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                                               "You must select a supplier");
                }

                if (editContext.GetValidationMessages().Any())
                {
                    //notify  the editcontext that there has been a change to the message store
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //the program assumes that the data is clean and can be further processed

                    int rowsaffected = _productServices.Product_Activation(CurrentProduct);

                    //Question: DID you ACTUALLY change any records?
                    //situation: an update was attempted but no records on the database were
                    //              actually change AND the action did NOT abort
                    //in this case rowsafftected = 0
                    if (rowsaffected == 0)
                    {
                        feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {CurrentProduct.ProductID}) has not been activated";

                    }
                    else
                    {
                        feedBackMessage = $"Product {CurrentProduct.ProductName} (id: {CurrentProduct.ProductID}) has been activated";

                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //  that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            feedBackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            feedBackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            feedBackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    
    }

    private async Task OnClear()
    {
        feedBackMessage = "";
        object[] messageline = new object[]
        {"Clearing the page will lose all unsaved data. Are you sure you wish to continue?"};
        if (await jsRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            //remove any old custom error message place in the validation message store
            validationMessageStore.Clear();

            //clear the fields
            //clear the current product instance of any data (not using local variables)
            //notice that the "system" constructor is used as the entity has NO constructor code within it
            CurrentProduct = new Product();

            //IMPORTANT!!!!!!!!!!!!!!!!!!
            //the editContext is associated with the current product instance
            //the editContext REQUIRES to be reset to the NEW current product instance
            editContext = new EditContext(CurrentProduct);
        }
    }
    private async Task GoToSearch()
    {
        //clear all old messages
        feedBackMessage = "";
        object[] messageline = new object[]
        {"Leaving the page will lose all unsaved data. Are you sure you wish to continue?"};
        if (await jsRuntime.InvokeAsync<bool>("confirm", messageline))
        {
            CurrentNavigationManager.NavigateTo("categoryproducts");
        }
    }
}
