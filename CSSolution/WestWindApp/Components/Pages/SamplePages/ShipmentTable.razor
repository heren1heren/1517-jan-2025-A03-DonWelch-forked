@page "/tablequery"
<PageTitle>Shipments Table</PageTitle>
@rendermode InteractiveServer

<!-- additional namespaces-->
@using WestWindSystem.BLL;
@using WestWindSystem.Entities;

<h1>Shipment Query (using scrolling)</h1>
<h4>... non primary key filter search</h4>

@if (feedBackMsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedBackMsg</p>
    </div>
}

@if (errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errorMsgs)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-3">
        <p><strong>Input of query values</strong></p>
        <label for="year">Enter shipment year:</label> &nbsp;&nbsp;
        <input id="year" type="number" @bind="yeararg"
               style="width:75px" />
        <br /><br />
        <label for="month">Enter shipment month:</label> &nbsp;&nbsp;
        <input id="month" type="number" @bind="montharg"
               style="width:75px" />
        <br /><br />
        <button type="submit" @onclick="GetByYearAndMonth"
                class="btn btn-outline-primary rounded-pill">
            Fetch Shipments
        </button>
    </div>
    <div class="col-md-9">
        @if(shipmentList == null)
        {
            <p>Enter desired year and month for search</p>
        }
        else
        {
            <p><strong>Display of query results</strong></p>
            if(shipmentList.Count == 0)
            {
                <p>No data found for year and month arguments in search</p>
            }
            else
            {
                //table
                //to reduce the number of data rows being displayed there are two techniques
                //a) pagination
                //b) scrolling

                //this example uses the quick and easy technique of scrolling
                //Note the table is surrounded by a div tag
                //     on the div tag is 2 parameters
                //      the class causes the scroll (built into bootstrap)
                //      the style specifies the height of the display area

                //the shipment record has a field called ShipVia which is foreign key (1, 2, 3, etc)
                //displaying that is meaningless to someone reading the data unless they were familiar with
                //      the pkey value associated with each company
                //solution: display the company name
                //Problem: the name is in a different table

                //If you look at the entities, records with fields used in sql scheme relationships
                //      have virtual navigational properties (see bottom of entity)
                //These properties allow you to have access to data in the related table

                //How to use

                //When you use the property just treat it as the name of an object so accessing the
                //      desired field in the related table just needs the dot (.) operator
                //In this example, the property is ShipViaNavigation which points to the Shippers table
                //      and the desired field from the Shippers table was CompanyName
                <div class="overflow-scroll" style="height:450px;">
                    <table class="table table-striped">
                        <thead style="position: sticky; top: 0; background-color:white;">
                            <tr>
                                <th>ID</th>
                                <th>Order</th>
                                <th>Date</th>
                                <th>Shipper</th>
                                <th>Freight $</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in shipmentList)
                            {
                                <tr>
                                    <td>@item.ShipmentID</td>
                                    <td>@item.OrderID</td>
                                    <td>@item.ShippedDate.ToShortDateString()</td>
                                    <td>@item.ShipViaNavigation.CompanyName</td>
                                    <td align="right">@(string.Format("{0:#,##0.00}", item.FreightCharge))</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
</div>

@code {
    private string feedBackMsg = "";
    private List<string> errorMsgs = new List<string>();

    //input variables for binding
    private int yeararg = 0;
    private int montharg = 1;

    //output variables
    private List<Shipment> shipmentList = null;

    //inject services
    [Inject]
    private ShipmentServices _shipmentServices { get; set; }

    // [Inject]
    // private ShipperServices _shipperServices { get; set; }
    // private List<Shipper> shipperList = new List<Shipper>();

    protected override void OnInitialized()
    {
        //there are two techniques to allow the use of navigational properties on your page
        //      a) bring in a dataset of the table to which you are attempting to navigate
        //      b) use the .Include method on the query itself (see Shipment query for this technique in BLL ShipmentServices)

        // Technique (a)
        // this data set is needed to handle the navigation reference used on the table data cell
        //           to display the shipper company name
        // no other coding is needed, the system will match up the dataset to the usage in the table above
        //shipperList = _shipperServices.Shipper_GetAll();

        yeararg = DateTime.Today.Year;
        base.OnInitialized();
    }

    private void GetByYearAndMonth()
    {
        feedBackMsg = "";
        errorMsgs.Clear();
        shipmentList = null;

        //validation
        if (montharg < 1 || montharg > 12)
        {
            errorMsgs.Add("Your month value is invalid. Month is between 1 and 12");
        }
        if (yeararg < 1950 || yeararg > DateTime.Today.AddDays(1).Year)
        {
            errorMsgs.Add("Your year value is invalid. Year is between 1950 and today");
        }

        if(errorMsgs.Count == 0)
        {
            //the query arguments are deemed valid
            //since the next statement calls a services which
            //  in itself could abort, the call NEEDS to be in a try/catch
            try
            {
                shipmentList = _shipmentServices.Shipment_GetByYearAndMonth(yeararg, montharg);
            }
            catch(Exception ex)
            {
                errorMsgs.Add($"System Error: {ex.Message}");
            }

        }
    }
}
